package com.inventory;

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.inventory.exception.InventoryNotFoundException;
import com.inventory.model.Inventory;
import com.inventory.repository.InventoryRepository;
import com.inventory.service.InventoryService;
import com.rate.service.exception.RateNotFoundException;
import com.rate.service.model.RateDetails;

@SpringBootTest
class InventoryServiceApplicationTests {

	@Autowired
	private InventoryService service;

	@MockBean
	private InventoryRepository inventoryRepository;

	@Test
	public void showAllInventoryDetailsTest() throws InventoryNotFoundException {
		List<Inventory> inv = new ArrayList<>();
		Inventory i= new Inventory(1, "Bathroom", "Toothpaste", 450);
		inv.add(i);
		when(inventoryRepository.findAll()).thenReturn(inv);
		assertEquals(1, service.showAllInventoryDetails().size());
	}

	@Test
	public void addInventoryDetailsTest() throws InventoryNotFoundException {
		Inventory inventory = new Inventory(1, "Bathroom", "Toothpaste", 450);
		when(inventoryRepository.insert(inventory)).thenReturn(inventory);
		assertEquals(inventory, service.addInventoryDetails(inventory));
	}

	@Test
	public void updateInventoryDetailsTest() throws InventoryNotFoundException {
		Inventory i1 = new Inventory(1, "Bathroom", "Toothpaste", 450);
		Inventory i2 = new Inventory(1, "Bathroom", "Toothpaste", 450);
		Optional<Inventory> inv = Optional.of(i1);
		when(inventoryRepository.findById(1)).thenReturn(inv);
		when(inventoryRepository.save(i2)).thenReturn(i2);
		assertEquals(i2, service.updateInventoryDetails(i2));
	}

	@Test
	public void deleteInventoryDetailsTest() throws InventoryNotFoundException {
		Inventory v = new Inventory(1, "Bathroom", "Toothpaste", 450);
		Optional<Inventory> inv = Optional.of(v);
		when(inventoryRepository.findById(1)).thenReturn(inv);
		assertEquals("Inventory with the 1 Deleted Successfully!", service.deleteInventoryDetails(1));

	}

}
