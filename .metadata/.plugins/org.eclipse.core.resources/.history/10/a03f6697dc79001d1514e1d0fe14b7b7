package com.roomservice;


import static org.junit.jupiter.api.Assertions.assertEquals;


import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.roomservice.exception.RoomNotFoundException;
import com.roomservice.model.Room;
import com.roomservice.repository.RoomRepository;
import com.roomservice.service.RoomService;



@SpringBootTest
class RoomServiceApplicationTests {
     
	@Autowired
	private RoomService service;
	
	@MockBean
	private RoomRepository roomRepository; 



   	@Test
   	public void showAllRoomTest() throws RoomNotFoundException {
   		List<Room> room = new ArrayList<>();
   		Room r = new Room(101, false, 500);
   		room.add(r);
   		when(roomRepository.findAll()).thenReturn(room);
   		assertEquals(1, service.showAllRoom().size());
   	}
       @Test
   	public void showRoomByIdTest()throws RoomNotFoundException{
   		Room r= new Room(101, false, 500);
   		 Optional<Room> room = Optional.of(r);
   		 when(roomRepository.findById(1)).thenReturn(room);
   	        assertEquals(r, service.showRoomById(1));
   	    }
       @Test
   	public void addRoomTest() throws RoomNotFoundException {
    	   Room room = new Room(101, false, 500);
   		when(roomRepository.insert(room)).thenReturn(room);
   		assertEquals(room, service.addRoom(room));
   	}
       @Test
   	public void updateRoomTest() throws RoomNotFoundException {
   		Room r1 = new  Room(101, false, 500);
   		Room r2 = new Room(101, false, 500) ;
   		Optional<Room> room = Optional.of(r1);
   		when(roomRepository.findById(101)).thenReturn(room);
   		when(roomRepository.save(r2)).thenReturn(r2);
   		assertEquals(r2, service.updateRoom(r2));
   	}
   	
   	@Test
   	public void deleteRoomTest() throws RoomNotFoundException{
   		Room r= new  Room(101, false, 500);
   		 Optional<Room> room = Optional.of(r);
   		 when(roomRepository.findById(1)).thenReturn(room);
   		 assertEquals("Room with the 1 Deleted Successfully!", service.deleteRoom(1));
   		
   	}
}







