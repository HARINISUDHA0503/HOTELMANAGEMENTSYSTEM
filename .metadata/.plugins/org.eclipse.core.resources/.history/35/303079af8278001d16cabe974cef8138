package com.inventory;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.guestservice.exception.GuestNotFoundException;
import com.guestservice.model.GuestDetails;
import com.inventory.exception.InventoryNotFoundException;
import com.inventory.model.Inventory;
import com.inventory.repository.InventoryRepository;
import com.inventory.service.InventoryService;

@SpringBootTest
class InventoryServiceApplicationTests {

	@Autowired
	private InventoryService service;

	@MockBean
	private InventoryRepository inventoryRepository;
	   
	    @Test
		public void showAllInventoryDetailsTest()  throws InventoryNotFoundException{
		 when(inventoryRepository.findAll()).thenReturn((List<Inventory>) Stream
				 .of(new Inventory(1, "Bathroom", "Toothpaste", 450)).collect(Collectors.toList()));
				assertEquals(1,service.showAllInventoryDetails().size());
	    }
	      
	    @Test
		public void addInventoryDetailsTest() throws InventoryNotFoundException{
	    	Inventory inventory=new Inventory(1, "Bathroom", "Toothpaste", 450);
			  when(inventoryRepository.insert(inventory)).thenReturn(inventory);
			  assertEquals(inventory, service.addInventoryDetails(inventory));
		  }
	    
	    @Test
	 		public Inventory updateInventoryDetails() throws InventoryNotFoundException {
	    	Inventory inventory=new Inventory(1, "Bathroom", "Toothpaste", 450);
	 		when(inventoryRepository.save(inventory)).thenReturn(inventory); 
	 		assertEquals(inventory,service.updateInventoryDetails(inventory));
	 		return inventory;
	 		}
	 	    
	 	    @Test
	 		public GuestDetails deleteGuestDetails() throws GuestNotFoundException {
	 	    	GuestDetails guest=new GuestDetails(1,"Harini","877532352","F","harini@gmail.com","trichy");
	 	    	guestService.deleteGuestDetails(1);
	 		verify(guestDetailsRepository,times(1)).delete(guest);
	 		return guest;
	 		}

	      
	    
}
