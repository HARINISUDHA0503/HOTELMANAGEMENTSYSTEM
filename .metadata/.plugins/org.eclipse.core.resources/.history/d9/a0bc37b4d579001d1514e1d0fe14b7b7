package com.reservation;

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;


import com.reservation.exception.ReservationNotFoundException;
import com.reservation.model.Reservation;
import com.reservation.repository.ReservationRepository;
import com.reservation.service.ReservationService;

@SpringBootTest
class ReservationServiceApplicationTests {
 
	@Autowired
	private ReservationService reservationService;

	@MockBean
	private ReservationRepository reservationRepository;

	@Test
	public void showAllReservationDetailsTest() throws ReservationNotFoundException {
		List<Reservation> reservation = new ArrayList<>();
		Reservation r = new  Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		reservation.add(r);
		when(reservationRepository.findAll()).thenReturn(reservation);
		assertEquals(1, reservationService.showAllReservationDetails().size());
	}

	@Test
	public void addReservationTest() throws ReservationNotFoundException {
		Reservation res = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		when(reservationRepository.insert(res)).thenReturn(res);
		assertEquals(res, reservationService.addReservation(res));
	}


	@Test
	public void showReservationByIdTest() throws ReservationNotFoundException {
		Reservation res = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		when(reservationRepository.insert(res)).thenReturn(res);
		assertEquals(res, reservationService.showReservationById(1));
	}

	@Test
	public void updateReservationTest() throws ReservationNotFoundException {
		Reservation r1 = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		Reservation r2 = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		Optional<Reservation> res = Optional.of(r1);
		when(reservationRepository.findById(1)).thenReturn(res);
		when(reservationRepository.save(r2)).thenReturn(r2);
		assertEquals(r2, reservationService.updateReservation(r2));
	}

	@Test
	public void deleteReservationTest() throws ReservationNotFoundException {
		Reservation r = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		Optional<Reservation> res = Optional.of(r);
		when(reservationRepository.findById(1)).thenReturn(res);
		assertEquals("Guest with the 1 Deleted Successfully!", reservationService.deleteReservation(1));

	}

}

