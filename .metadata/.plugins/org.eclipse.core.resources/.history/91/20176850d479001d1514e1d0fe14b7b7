package com.reservation;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.reservation.exception.ReservationNotFoundException;
import com.reservation.model.Reservation;
import com.reservation.repository.ReservationRepository;
import com.reservation.service.ReservationService;

@SpringBootTest
class ReservationServiceApplicationTests {
 
	@Autowired
	private ReservationService reservationService;

	@MockBean
	private ReservationRepository reservationRepository;
	
	@Test
	public void showAllReservationDetailsTest() throws ReservationNotFoundException {
		List<Reservation> reservation = new ArrayList<>();
		Reservation r = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		reservation.add(r);
		when(reservationRepository.findAll()).thenReturn(reservation);
		assertEquals(1,reservation.showAllReservationDetails().size());
	}

	@Test
	public void showReservationByIdTest() throws ReservationNotFoundException {
		Reservation res = new Reservation(1,3, 3, "2022-12-24", "2022-12-26", 2, "Harini", "harini@gmail.com", "987655321", "F", "Chennai", true);
		when(reservationRepository.insert(res)).thenReturn(res);
		assertEquals(res, reservationService.showReservationById(1));
	}

	@Test
	public void updateGuestDetailsTest() throws GuestNotFoundException {
		GuestDetails g1 = new GuestDetails(1, "Harini", "877532352", "F", "harini@gmail.com", "trichy");
		GuestDetails g2 = new GuestDetails(1, "Harini", "877532352", "F", "harini@gmail.com", "trichy");
		Optional<GuestDetails> guest = Optional.of(g1);
		when(guestDetailsRepository.findById(1)).thenReturn(guest);
		when(guestDetailsRepository.save(g2)).thenReturn(g2);
		assertEquals(g2, guestService.updateGuestDetails(g2));
	}

	@Test
	public void deleteGuestDetailsTest() throws GuestNotFoundException {
		GuestDetails g = new GuestDetails(1, "Harini", "877532352", "F", "harini@gmail.com", "trichy");
		Optional<GuestDetails> guest = Optional.of(g);
		when(guestDetailsRepository.findById(1)).thenReturn(guest);
		assertEquals("Guest with the 1 Deleted Successfully!", guestService.deleteGuestDetails(1));

	}

}


	

}
