package com.rate.service;

import static org.junit.jupiter.api.Assertions.assertEquals;


import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.rate.service.exception.RateNotFoundException;
import com.rate.service.model.RateDetails;
import com.rate.service.repository.RateRepository;
import com.rate.service.service.RateServiceImplementation;



@SpringBootTest
class RateServiceApplicationTests {

	@Autowired
	private RateServiceImplementation service;

	@MockBean
	private RateRepository repository;
    
	  @Test
			public void showAllRateDetailsTest() throws RateNotFoundException {
			 when(repository.findAll()).thenReturn((List<RateDetails>) Stream
					 .of(new RateDetails(1, 1000,200).collect(Collectors.toList()));
					assertEquals(1,guestService.showAllGuestDetails().size());
		    }
		     
		    @Test
			public void addGuestDetailsTest() throws GuestNotFoundException{
				  GuestDetails guest=new GuestDetails(1,"Harini","877532352","F","harini@gmail.com","trichy");
				  when(guestDetailsRepository.insert(guest)).thenReturn(guest);
				  assertEquals(guest, guestService.addGuestDetails(guest));
			  }
		    
		    @Test
			public void updateGuestDetailsTest() throws GuestNotFoundException {
				GuestDetails g1 = new  GuestDetails(1,"Harini","877532352","F","harini@gmail.com","trichy");
				GuestDetails g2 = new  GuestDetails(1,"Harini","877532352","F","harini@gmail.com","trichy");
				Optional<GuestDetails> guest = Optional.of(g1);
				when(guestDetailsRepository.findById(1)).thenReturn(guest);
				when(guestDetailsRepository.save(g2)).thenReturn(g2);
				assertEquals(g2, guestService.updateGuestDetails(g2));
			}
			
			@Test
			public void deleteGuestDetailsTest() throws GuestNotFoundException{
				GuestDetails g= new GuestDetails(1,"Harini","877532352","F","harini@gmail.com","trichy");
				 Optional<GuestDetails> guest = Optional.of(g);
				 when(guestDetailsRepository.findById(1)).thenReturn(guest);
				 assertEquals("Guest with the 1 Deleted Successfully!", guestService.deleteGuestDetails(1));
				
			} 
	    

}
